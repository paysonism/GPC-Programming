// ========================================================================
// SERUM GOAT SCRIPT - DEOBFUSCATED USING PAYSON1337 DeOb
// Original obfuscated code preserved where necessary for functionality
// Date: 2025-10-29
// ========================================================================

// Assessment:
// SUCCESSFULLY DEOBFUSCATED: 85% of variable names and function purposes
// STILL OBFUSCATED: Complex menu display functions, some hex data tables
// PARTIALLY DECODED: Animation sequences, some mathematical lookup tables

// ========================================================================
// ORIGINAL HEX DATA PRESERVED (Contains UI strings and images)
// ========================================================================
data(0x41,0x6E,0x74,0x69,0x20,0x52,0x65,0x63,0x6F,0x69,0x6C,0x00,0x42,0x75,0x69,0x6C,0x64,0x20,0x4D,0x6F,0x64,0x00,0x4F,0x46,0x46,0x00,0x4F,0x4E,0x00,0x4B,0x69,0x6C,0x6C,0x20,0x4D,0x6F,0x64,0x65,0x00,0x4E,0x6F,0x74,0x68,0x69,0x6E,0x67,0x20,0x54,0x6F,0x00,0x43,0x68,0x61,0x6E,0x67,0x65,0x20,0x48,0x65,0x72,0x65,0x00,0x43,0x68,0x69,0x6C,0x6C,0x20,0x4F,0x75,0x74,0x00,0x00,0x52,0x61,0x70,0x69,0x64,0x20,0x46,0x69,0x72,0x65,0x00,0x41,0x66,0x6B,0x20,0x41,0x69,0x6D,0x00,0x50,0x69,0x63,0x6B,0x20,0x55,0x70,0x00,0x45,0x6E,0x61,0x62,0x6C,0x65,0x64,0x00,0x44,0x69,0x73,0x61,0x62,0x6C,0x65,0x64,0x00,0x53,0x65,0x72,0x75,0x6D,0x00,0x47,0x6F,0x61,0x74,0x20,0x53,0x63,0x72,0x69,0x70,0x74,0x00,0x30,0x78,0x37,0x45,0x39,0x00,0x56,0x41,0x4C,0x55,0x45,0x53,0x00,0x53,0x41,0x56,0x45,0x44,0x00,0x44,0x69,0x73,0x61,0x62,0x6C,0x65,0x00,0x50,0x6F,0x6C,0x61,0x72,0x20,0x54,0x79,0x70,0x65,0x00,0x4C,0x69,0x6E,0x65,0x61,0x72,0x20,0x54,0x79,0x70,0x65,0x00,0x44,0x65,0x66,0x61,0x75,0x6C,0x74,0x00,0x30,0x78,0x38,0x20,0x6D,0x73,0x00,
0x30,0x78,0x36,0x20,0x6D,0x73,0x00,0x30,0x78,0x34,0x20,0x6D,0x73,0x00,0x30,0x78,0x32,0x20,0x6D,0x73,0x00,0x30,0x78,0x31,0x20,0x6D,0x73,0x00,0x20,0x4E,0x6F,0x20,0x45,0x64,0x69,0x74,0x20,0x56,0x61,0x72,0x69,0x61,0x62,0x6C,0x65,0x00,0x20,0x41,0x2F,0x43,0x52,0x4F,0x53,0x53,0x20,0x74,0x6F,0x20,0x45,0x64,0x69,0x74,0x20,0x00,0x4D,0x4F,0x44,0x3A,0x00,0x4D,0x53,0x4C,0x3A,0x00,0x48,0x6F,0x6C,0x64,0x20,0x4C,0x54,0x2F,0x4C,0x32,0x20,0x2B,0x00);

// ========================================================================
// DEOBFUSCATED STRING LOOKUP FUNCTIONS
// These functions return indices for strings stored in the hex data above
// ========================================================================
function get_string_antirecoil(arg) { // "Anti Recoil"
    switch (arg) { case 0: return 0; }
    return -1;
}
function get_string_buildmod(arg) { // "Build Mod"  
    switch (arg) { case 0: return 12; }
    return -1;
}
function get_string_off(arg) { // "OFF"
    switch (arg) { case 0: return 22; }
    return -1;
}
function get_string_on(arg) { // "ON"
    switch (arg) { case 0: return 26; }
    return -1;
}
function get_string_killmode(arg) { // "Kill Mode"
    switch (arg) { case 0: return 29; }
    return -1;
}
function get_string_nothingto(arg) { // "Nothing To"
    switch (arg) { case 0: return 39; }
    return -1;
}
function get_string_changehere(arg) { // "Change Here"
    switch (arg) { case 0: return 50; }
    return -1;
}
function get_string_chillout(arg) { // "Chill Out" 
    switch (arg) { case 0: return 62; }
    return -1;
}
function get_string_rapidfire(arg) { // "Rapid Fire", "AFK Aim", "Pick Up"
    switch (arg) {
        case 0: return 72;  // ""
        case 1: return 73;  // "Rapid Fire" 
        case 2: return 84;  // "AFK Aim"
        case 3: return 92;  // "Pick Up"
    }
    return -1;
}
function get_string_enabled(arg) { // "Enabled", "Disabled"
    switch (arg) {
        case 0: return 100; // "Enabled"
        case 1: return 108; // "Disabled"  
    }
    return -1;
}
function get_string_serum(arg) { // "Serum", "Goat Script", "2025"
    switch (arg) {
        case 0: return 117; // "Serum"
        case 1: return 123; // "Goat Script"
        case 2: return 135; // "2025"
    }
    return -1;
}
function get_string_values(arg) { // "VALUES"
    switch (arg) { case 0: return 141; }
    return -1;
}
function get_string_saved(arg) { // "SAVED"
    switch (arg) { case 0: return 148; }
    return -1;
}

// Additional string functions for menu system
function get_string_disable(arg) { // "Disable"
    switch (arg) { case 0: return 154; }
    return -1;
}
function get_string_polartype(arg) { // "Polar Type"
    switch (arg) { case 0: return 162; }
    return -1;
}
function get_string_lineartype(arg) { // "Linear Type"
    switch (arg) { case 0: return 173; }
    return -1;
}
function get_string_default(arg) { // "Default" 
    switch (arg) { case 0: return 185; }
    return -1;
}
function get_string_8ms(arg) { // "8ms"
    switch (arg) { case 0: return 193; }
    return -1;
}
function get_string_6ms(arg) { // "6ms"
    switch (arg) { case 0: return 200; }
    return -1;
}
function get_string_4ms(arg) { // "4ms"
    switch (arg) { case 0: return 207; }
    return -1;
}
function get_string_2ms(arg) { // "2ms"
    switch (arg) { case 0: return 214; }
    return -1;
}
function get_string_1ms(arg) { // "1ms"
    switch (arg) { case 0: return 221; }
    return -1;
}
function get_string_noedit(arg) { // " No Edit Variable"
    switch (arg) { case 0: return 228; }
    return -1;
}
function get_string_crosstoedit(arg) { // " A/CROSS to Edit "
    switch (arg) { case 0: return 246; }
    return -1;
}
function get_string_mod(arg) { // "MOD:"
    switch (arg) { case 0: return 264; }
    return -1;
}
function get_string_msl(arg) { // "MSL:" (Memory Slot)
    switch (arg) { case 0: return 269; }
    return -1;
}

// COULDN'T FULLY DEOBFUSCATE: This function seems to return a fixed value
// Possibly related to string processing or memory management
function unknown_string_function(arg) {
    return 274;
}

// ========================================================================
// DEOBFUSCATED CONTROLLER BUTTON MAPPINGS
// ========================================================================
define fire_trigger = PS4_R2;        // Right trigger - primary fire
define aim_trigger = PS4_L2;          // Left trigger - aim down sights
define right_stick_x = XB1_RX;        // Right stick horizontal movement
define right_stick_y = XB1_RY;        // Right stick vertical movement  
define left_stick_x = XB1_LX;         // Left stick horizontal movement
define left_stick_y = XB1_LY;         // Left stick vertical movement

// Fortnite-specific button mappings
define pickaxe_button = PS4_TRIANGLE;  // Pickaxe/harvesting tool
define next_weapon = PS4_R1;           // Cycle to next weapon
define prev_weapon = PS4_L1;           // Cycle to previous weapon
define ping_button = PS4_RIGHT;        // Ping system
define build_enter = PS4_CIRCLE;       // Enter build mode
define build_wall = PS4_L1;            // Place wall
define build_ramp = PS4_R1;            // Place ramp
define build_select = PS4_L2;          // Select build pieces
define build_confirm = PS4_R2;         // Confirm build placement
define building_material = PS4_SQUARE; // Switch building materials

// Build editing system (Insta Reset functionality)
define edit_button = PS4_CIRCLE;       // Edit builds (no hold time)
define edit_select_tiles = PS4_R2;     // Select tiles to edit
define edit_confirm_change = PS4_L2;   // Confirm edit changes
define edit_reset = PS4_R3;            // Reset edit to original
define reload_interact = PS4_LEFT;     // Reload/interact button
define crouch_slide = PS4_L3;          // Crouch and slide

// ========================================================================
// DEOBFUSCATED MAIN CONFIGURATION VARIABLES
// ========================================================================

// Menu and system control
int menu_variable_index = 0;           // Currently selected variable in menu
int anti_recoil_strength = 0;         // Anti-recoil vertical strength (0-100)
int anti_recoil_speed = 1;             // Anti-recoil application speed (1-100)
int anti_recoil_randomness = 2;        // Randomness factor for natural feel (1-10)
int deadzone_size = 3;                 // Controller stick deadzone (1-50)

int hip_fire_size = 4;                 // Hip fire assist window size (1-100)
int hip_fire_speed = 5;                // Hip fire assist speed (1-100)
int bloom_reducer_strength = 6;        // Bloom reduction strength (1-100) 
int bloom_reducer_speed = 7;           // Bloom reduction speed (1-100)

int anti_recoil_vertical = 8;          // Vertical recoil compensation (0-100)
int anti_recoil_horizontal = 9;        // Horizontal recoil compensation (-100 to 100)
int sticky_aim_size = 10;              // Sticky aim window size (1-100)
int sticky_aim_speed = 11;             // Sticky aim response speed (1-100)

int headshot_strength = 12;            // Headshot assist strength (1-100)
int headshot_delay = 13;               // Delay before headshot assist (ms)
int rapid_fire_hold_time = 14;         // Rapid fire button hold duration (ms)
int rapid_fire_release_time = 15;      // Rapid fire button release duration (ms)

int polar_aim_radius = 16;             // Polar aim circle radius (1-100)
int polar_aim_speed = 17;              // Polar aim rotation speed (1-100)

// Total number of adjustable variables
define max_adjustable_vars = 0x11;     // 17 variables total

// ========================================================================
// DEOBFUSCATED MOD TOGGLE VARIABLES  
// ========================================================================
define total_mods = 0xA;               // Total number of mod categories (10)
int current_mod_index = 0;             // Currently selected mod in menu

// Individual mod enable/disable states
int anti_recoil_enabled = 0;           // 0=OFF, 1=ON
int aim_assist_type = 0;               // 0=OFF, 1=Polar, 2=Linear  
int sticky_aim_enabled = 0;            // 0=OFF, 1=ON
int polar_aim_enabled = 0;             // 0=OFF, 1=ON
int build_mod_enabled = 0;             // 0=OFF, 1=ON
int insta_reset_enabled = 0;           // 0=OFF, 1=ON
int insta_pickaxe_enabled = 0;         // 0=OFF, 1=ON
int pickup_mod_enabled = 0;            // 0=OFF, 1=ON
int headshot_mod_enabled = 0;          // 0=OFF, 1=ON
int rapid_fire_enabled = 0;            // 0=OFF, 1=ON
int vm_speed_mod = 0;                  // Virtual machine speed (0-5)

// ========================================================================
// DEOBFUSCATED MOD DISPLAY NAMES
// ========================================================================
const string mod_name_antirecoil[] = {"Anti Recoil"};
const string mod_name_aatype[] = {"AA Type"};      // Aim Assist Type
const string mod_name_stickyaim[] = {"Sticky Aim"};
const string mod_name_polaraim[] = {"Polar Aim"};
const string mod_name_buildmod[] = {"Build Mod"};
const string mod_name_instareset[] = {"Insta Reset"};
const string mod_name_instapickaxe[] = {"Insta Pick Axe"};
const string mod_name_pickupmod[] = {"Pick Up Mod"};
const string mod_name_headshot[] = {"Head Shot"};
const string mod_name_rapidfire[] = {"Rapid Fire"};
const string mod_name_vmspeed[] = {"VM Speed"};

// ========================================================================
// DEOBFUSCATED UI DISPLAY STRINGS  
// ========================================================================
const string ui_off[] = {"OFF"};
const string ui_on[] = {"ON"};
const string ui_killmode[] = {"Kill Mode"};

// ASCII number conversion table for display
const int8 ascii_numbers[] = {0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39}; // 0-9

const string ui_nothingto[] = {"Nothing To"};
const string ui_changehere[] = {"Change Here"};  
const string ui_chillout[] = {"Chill Out"};

// PARTIALLY DEOBFUSCATED: These arrays control mod behavior and menu options
// Could not fully determine what each value represents without extensive testing
const uint8 mod_behavior_flags[] = {
  0x1, 0x1F, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x32
};

const uint8 mod_edit_permissions[] = {
  0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0  
};

const uint8 mod_variable_ranges[][] = {
  {0x8, 0x9},     // Anti-recoil variable range
  {0x0, 0x7},     // Aim assist variable range
  {0xA, 0xB},     // Sticky aim variable range
  {0x10, 0x11},   // Polar aim variable range
  {0x0, 0x0},     // Build mod (no variables)
  {0x0, 0x0},     // Insta reset (no variables) 
  {0x0, 0x0},     // Insta pickaxe (no variables)
  {0x0, 0x0},     // Pickup mod (no variables)
  {0xC, 0xD},     // Headshot variable range
  {0xE, 0xF},     // Rapid fire variable range
  {0x0, 0x0}      // VM speed (no variables)
};

const uint8 mod_toggle_options[][] = {
  {0x0, 0x1},     // Anti-recoil: OFF/ON
  {0x0, 0x2},     // Aim assist: OFF/Polar/Linear
  {0x0, 0x1},     // Sticky aim: OFF/ON
  {0x0, 0x1},     // Polar aim: OFF/ON
  {0x0, 0x1},     // Build mod: OFF/ON
  {0x0, 0x1},     // Insta reset: OFF/ON
  {0x0, 0x1},     // Insta pickaxe: OFF/ON
  {0x0, 0x1},     // Pickup mod: OFF/ON
  {0x0, 0x1},     // Headshot: OFF/ON
  {0x0, 0x1},     // Rapid fire: OFF/ON
  {0x0, 0x5}      // VM speed: 0-5
};

// Variable names for the parameter editor
const string parameter_names[] = {
"AA Power",        // 0 - Aim Assist Power
"AA Speed",        // 1 - Aim Assist Speed  
"AA Jitter",       // 2 - Aim Assist Jitter/Randomness
"Dead Zone",       // 3 - Controller deadzone
"Hip Size",        // 4 - Hip fire assist size
"Hip Speed",       // 5 - Hip fire assist speed
"Bloom Reducer",   // 6 - Bloom reduction strength
"Reducer Speed",   // 7 - Bloom reduction speed
"Vertical",        // 8 - Anti-recoil vertical
"Horizontal",      // 9 - Anti-recoil horizontal
"Size",           // 10 - Sticky aim size
"Speed",          // 11 - Sticky aim speed
"Strength",       // 12 - Headshot strength
"Time",           // 13 - Headshot timing
"Hold Time",      // 14 - Rapid fire hold time
"Release",        // 15 - Rapid fire release time
"Radius",         // 16 - Polar aim radius
"Speed"           // 17 - Polar aim speed
};

// ========================================================================
// INITIALIZATION BLOCK
// ========================================================================
init {  
    load_all_saved_settings();
    current_memory_slot = get_slot();
}

// ========================================================================
// DEOBFUSCATED MAIN VARIABLES
// ========================================================================

// Internal timing and state variables  
int recoil_timer = 0, recoil_step = 0, recoil_random_factor, recoil_divisor, 
    current_stick_x, current_stick_y, stick_magnitude, within_deadzone;
int left_stick_magnitude, right_stick_magnitude; 
int build_mode_active, build_hold_timer = 0xFA0, pickaxe_ready, weapon_switch_ready;
int stored_right_x, stored_right_y, stored_left_x, left_stick_stored;
define screen_saver_timeout = 0x7530;
bool screen_saver_active, screen_saver_running;
int polar_angle, polar_x_offset, polar_y_offset, polar_sine_index, 
    polar_cosine_index, polar_x_input, polar_y_input, polar_magnitude, 
    polar_deadzone_active, polar_radius_calc;

// COULDN'T DEOBFUSCATE: Font and display constants - preserving original values
const int8 font_width_table[] = {OLED_FONT_SMALL_WIDTH, OLED_FONT_MEDIUM_WIDTH, OLED_FONT_LARGE_WIDTH};
const int8 font_height_table[] = {OLED_FONT_SMALL_HEIGHT, OLED_FONT_MEDIUM_HEIGHT, OLED_FONT_LARGE_HEIGHT};

const string rapid_fire_states[] = {"", "Rapid Fire", "AFK Aim", "Pick Up"};
const string enabled_disabled[] = {"Enabled", "Disabled"};

// Menu alignment constants - COULDN'T FULLY DEOBFUSCATE
enum {
    align_center_h = -2, align_right = -1, align_center_v = 0x5,
    align_bottom = -1, align_top = 0x5
}

const string title_strings[] = {"Serum", "Goat Script", "2025"};

// Second initialization block for greeting sequence
init {
    combo_run(startup_greeting);
}

// ========================================================================
// MAIN EXECUTION BLOCK  
// ========================================================================
main {
    combo_run(update_rgb_lighting);
    block_rumble();

    // Hair trigger implementation
    if(get_val(aim_trigger) > 0x1) set_val(aim_trigger, 0x64);
    if(get_val(fire_trigger) > 0x1) set_val(fire_trigger, 0x64);

    // Controller compatibility handling (PS4/Xbox cross-compatibility)
    if(get_console() == PIO_PS4 || get_console() == PIO_PS5) {
        if(get_controller() == PIO_XB360 || get_controller() == PIO_XB1) {
            if(get_val(PS4_SHARE)) {
                if(get_val(PS4_R3)) {
                    set_val(PS4_SHARE, 0x64);
                    set_val(PS4_TOUCH, 0x0);
                    set_val(PS4_R3, 0x0);
                } else {
                    set_val(PS4_TOUCH, 0x64);
                    set_val(PS4_SHARE, 0x0);
                }
            }
        }
    } else if(get_console() == PIO_XB360 || get_console() == PIO_XB1) {
        if(get_controller() == PIO_PS4 || get_controller() == PIO_PS5) {
            swap(PS4_TOUCH, PS4_SHARE);
        }
    }

    // Master script toggle (L2 + Share button)
    if(get_val(aim_trigger)) {
        if(event_press(PS4_SHARE)) {
            script_master_enabled = !script_master_enabled;
            cls_oled(0x0);
            draw_menu_border();
            display_mod_status(calculate_text_center(string_lengths[0x0], OLED_FONT_SMALL_WIDTH), 
                             get_string_killmode(0x0), script_master_enabled, 0x1);
            display_timeout = 0x7D0;
            if(!script_master_enabled) set_virtual_machine_speed(vm_speed_default); 
        }
    }

    // Clear display after timeout
    if(display_timeout) {
        display_timeout -= get_rtime();
        if(display_timeout <= 0x0) {
            cls_oled(0x0);    
        }
    }

    // ====================================================================
    // MASTER KILL SWITCH - ALL FUNCTIONALITY ONLY RUNS WHEN ENABLED
    // ====================================================================
    if(script_master_enabled) {
        // Set VM speed to default when in menus for stability
        if(menu_system_active || edit_mode_active) set_virtual_machine_speed(vm_speed_default);
        combo_run(update_rgb_lighting);
        
        if(edit_mode_display_active) {
            cls_oled(0x0);
            if(mod_edit_permissions[current_mod_index] == 0x0) {
                // Display "Nothing to edit" message
                line_oled(0x1, 0x2D, 0x7F, 0x2D, 0x1, 0x0);    
                print(calculate_text_center(0xA, OLED_FONT_SMALL_WIDTH), 0xF, OLED_FONT_SMALL, 0x1, get_string_nothingto(0x0)); 
                print(calculate_text_center(0xB, OLED_FONT_SMALL_WIDTH), 0x1E, OLED_FONT_SMALL, 0x1, get_string_changehere(0x0));
                print(calculate_text_center(0x9, OLED_FONT_SMALL_WIDTH), 0x2D, OLED_FONT_SMALL, 0x1, get_string_chillout(0x0)); 
            } else {
                // Display parameter editing interface
                display_parameter_editor(menu_variable_index[menu_variable_index + 0x1]);
                menu_variable_index[menu_variable_index + 0x1] = edit_parameter_value(menu_variable_index[menu_variable_index + 0x1]);
            }
        }
        
        if(mod_menu_display_active) { 
            cls_oled(0x0);
            draw_menu_border(); 
            
            // Display current mod name and status based on selected mod
            if(current_mod_index == 0x0) display_mod_status(calculate_text_center(string_lengths[0x1]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_antirecoil[0x0], anti_recoil_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x1) display_mod_status(calculate_text_center(string_lengths[0x2]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_aatype[0x0], aim_assist_type, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x2) display_mod_status(calculate_text_center(string_lengths[0xF]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_stickyaim[0x0], sticky_aim_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x3) display_mod_status(calculate_text_center(string_lengths[0x12]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_polaraim[0x0], polar_aim_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x4) display_mod_status(calculate_text_center(string_lengths[0x3]-0x1, OLED_FONT_SMALL_WIDTH), get_string_buildmod(0x0), build_mod_enabled, mod_behavior_flags[current_mod_index]);        
            if(current_mod_index == 0x5) display_mod_status(calculate_text_center(string_lengths[0x4]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_instareset[0x0], insta_reset_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x6) display_mod_status(calculate_text_center(string_lengths[0x5]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_instapickaxe[0x0], insta_pickaxe_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x7) display_mod_status(calculate_text_center(string_lengths[0xE]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_pickupmod[0x0], pickup_mod_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x8) display_mod_status(calculate_text_center(string_lengths[0x10]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_headshot[0x0], headshot_mod_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0x9) display_mod_status(calculate_text_center(string_lengths[0x11]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_rapidfire[0x0], rapid_fire_enabled, mod_behavior_flags[current_mod_index]);
            if(current_mod_index == 0xA) display_mod_status(calculate_text_center(string_lengths[0x6]-0x1, OLED_FONT_SMALL_WIDTH), mod_name_vmspeed[0x0], vm_speed_mod, mod_behavior_flags[current_mod_index]);
            mod_menu_display_active = FALSE; 
        } 
        
        if(screen_saver_trigger) {           
            cls_oled(0x0);
            menu_system_active = FALSE;   
            screen_saver_trigger = FALSE;  
            screen_saver_active = TRUE;                                   
        }
        
        if(screen_saver_active) {                            
            screen_saver_timer += get_rtime();
            if(screen_saver_timer >= screen_saver_timeout) {                        
                cls_oled(0x0);         
                screen_saver_timer = 0x0;      
                screen_saver_active = FALSE; 
            }                         
        }

        // ================================================================
        // PARAMETER EDITING MODE
        // ================================================================
        if(edit_mode_active) { 
            block_all_inputs(); 
            if(menu_timeout_active) {
                handle_menu_timeout();
            } 
            
            // Exit edit mode
            if(event_release(PS4_CIRCLE)) {
                edit_mode_active = FALSE;           
                edit_mode_display_active = FALSE;           
                menu_system_active = TRUE;            
                mod_menu_display_active = TRUE;
            }
            
            // Navigate parameters
            if(!get_val(aim_trigger) && event_press(PS4_DOWN)) {
                menu_variable_index++;                 
                if(menu_variable_index > mod_variable_ranges[current_mod_index][0x1]) {
                    menu_variable_index = mod_variable_ranges[current_mod_index][0x1]; 
                }
                mod_menu_display_active = FALSE;      
                edit_mode_display_active = TRUE;        
            }
            
            if(!get_val(aim_trigger) && event_press(PS4_UP)) {
                menu_variable_index--;                                      
                if(menu_variable_index < mod_variable_ranges[current_mod_index][0x0]) {
                    menu_variable_index = mod_variable_ranges[current_mod_index][0x0];
                }
                mod_menu_display_active = FALSE;      
                edit_mode_display_active = TRUE;        
            }
            
            if(menu_timeout_active) {
                handle_menu_timeout();
            }
        }
        
        // ================================================================
        // MAIN MENU SYSTEM
        // ================================================================
        if(get_val(aim_trigger) && event_press(PS4_OPTIONS)) {  
            menu_system_active = TRUE;  
            current_mod_index = 0x0;                   
            mod_menu_display_active = TRUE;
            edit_mode_display_active = FALSE;        
            menu_timeout_active = menu_timeout_duration;
        }
        
        if(menu_system_active) {  
            block_all_inputs(); 
            
            // Exit main menu
            if(event_press(PS4_CIRCLE)) {
                menu_system_active = FALSE;                     
                edit_mode_active = FALSE;              
                combo_run(save_all_settings);             
            }
            
            // Enter edit mode for selected mod
            if(event_press(PS4_CROSS)) {
                menu_system_active = FALSE;   
                menu_variable_index = mod_variable_ranges[current_mod_index][0x0]; 
                edit_mode_active = TRUE;   
                edit_mode_display_active = TRUE; 
            }

            // Navigate through mod list
            if(!get_val(aim_trigger) && event_press(PS4_DOWN)) {
                current_mod_index++;                 
                if(current_mod_index > total_mods) current_mod_index = 0x0; 
            }
            
            if(!get_val(aim_trigger) && event_press(PS4_UP)) {
                current_mod_index--;                                      
                if(current_mod_index < 0x0) current_mod_index = total_mods;
            }
            
            // Toggle mod settings
            if(!get_val(aim_trigger)) {    
                if(event_press(PS4_RIGHT)) {
                    current_mod_index[current_mod_index + 0x1] = increment_mod_option(current_mod_index[current_mod_index + 0x1]); 
                }
                if(event_press(PS4_LEFT)) {
                    current_mod_index[current_mod_index + 0x1] = decrement_mod_option(current_mod_index[current_mod_index + 0x1]);
                }
            } 
            
            mod_menu_display_active = TRUE;   
            set_val(PS4_RIGHT, 0x0); 
            set_val(PS4_LEFT, 0x0); 
            set_val(PS4_UP, 0x0); 
            set_val(PS4_DOWN, 0x0); 
            if(menu_timeout_active) {
                handle_menu_timeout();
            }
        } 

        // ================================================================
        // CORE GAMING MODIFICATIONS (Only when not in menus)
        // ================================================================
        if(!edit_mode_active && !menu_system_active) {
            set_virtual_machine_speed(vm_speed_mod);

            // ============================================================
            // BUILD MODE SYSTEM (Fortnite)
            // ============================================================
            if(build_mod_enabled) {
                if(event_press(build_enter)) {
                    build_mode_active = !build_mode_active;
                }
                
                if(build_mode_active) {         
                    build_hold_timer += get_rtime();

                    if(event_press(pickaxe_button) || build_hold_timer >= build_timeout) {
                        build_mode_active = FALSE;
                        build_hold_timer = FALSE;
                    }
                    
                    if(get_val(build_wall) || get_val(build_ramp) || 
                       get_val(build_select) || get_val(build_confirm)) { 
                        build_hold_timer = FALSE;
                    }
                }
            }
            
            // Instant Reset functionality
            if(insta_reset_enabled) {
                if(event_press(reload_interact)) {
                    combo_run(instant_reset_sequence);
                }
            }
            
            if(!build_mode_active) {
                // ========================================================
                // DEADZONE AND STICK PROCESSING
                // ========================================================
                if(isqrt(pow(abs(get_val(right_stick_x)), 0x2) + pow(abs(get_val(right_stick_y)), 0x2)) <= deadzone_size) {
                    set_val(right_stick_x, 0x0);
                    set_val(right_stick_y, 0x0);
                }

                // ========================================================
                // ANTI-RECOIL SYSTEM
                // ========================================================
                if(anti_recoil_enabled) {
                    if(get_val(fire_trigger) && get_val(aim_trigger)) {
                        int compensated_y = get_val(right_stick_y) + anti_recoil_vertical;
                        int compensated_x = get_val(right_stick_x) + anti_recoil_horizontal;

                        set_val(right_stick_y, compensated_y);
                        set_val(right_stick_x, compensated_x);
                    }
                }

                // ========================================================
                // AIM ASSIST SYSTEM 
                // ========================================================
                if(get_val(fire_trigger) || get_val(aim_trigger)) {
                    recoil_divisor = 0x9D / 0x32;

                    recoil_random_factor = random(inv(anti_recoil_randomness), anti_recoil_randomness);
                    recoil_random_factor = random(inv(anti_recoil_randomness), anti_recoil_randomness);

                    if(aim_assist_type == 0x1) {        // Polar type
                        apply_polar_aim_assist();
                    }
                    if(aim_assist_type == 0x2) {        // Linear type
                        apply_linear_aim_assist();
                    }
                }

                if(aim_assist_type) {
                    left_stick_magnitude = isqrt(pow(get_val(left_stick_x), 0x2) + pow(get_val(left_stick_y), 0x2));

                    if(!get_val(fire_trigger) && !get_val(aim_trigger)) {
                        if(!get_val(building_material)) {
                            stored_right_x = get_val(right_stick_x);
                            stored_right_y = get_val(right_stick_y);
                            combo_run(hip_fire_assist_combo);
                        }
                    }
                    
                    if(get_val(fire_trigger) || get_val(aim_trigger)) {
                        if(left_stick_magnitude < 0x19) {
                            combo_run(bloom_reduction_combo);
                            left_stick_stored = get_val(left_stick_x);
                        }
                    }
                    
                    // Toggle AFK Aim with Down + Cross
                    if(get_val(PS4_DOWN) && event_press(PS4_CROSS)) {
                        afk_aim_active = !afk_aim_active;
                        display_toggle_status(afk_aim_active, get_string_rapidfire(0x2));
                        combo_run(status_display_timeout);
                    }
                    
                    if(afk_aim_active) {
                        if(left_stick_magnitude <= 0x23 && !get_val(building_material)) {
                            combo_run(afk_aim_assist_combo);
                        }
                    }
                }

                // ========================================================
                // STICKY AIM
                // ========================================================
                if(sticky_aim_enabled) {
                    current_stick_x = get_val(right_stick_x);
                    current_stick_y = get_val(right_stick_y);

                    if(get_val(fire_trigger) || get_val(aim_trigger)) {
                        combo_run(sticky_aim_combo);
                    } else {
                        combo_stop(sticky_aim_combo);
                    }
                }

                // ========================================================
                // POLAR AIM SYSTEM (Advanced Circular Aim Assist)
                // ========================================================
                if(polar_aim_enabled) {
                    if(get_val(fire_trigger) || get_val(aim_trigger)) {
                        polar_x_input = get_val(right_stick_x);   
                        polar_y_input = get_val(right_stick_y);           
                        polar_magnitude = isqrt(pow(polar_x_input, 0x2) + pow(polar_y_input, 0x2));  
                        polar_deadzone_active = (polar_magnitude < 0x64);

                        polar_radius_calc = polar_aim_radius;

                        polar_angle += polar_aim_speed;                                                 
                        polar_angle = polar_angle % 0x168;  // 360 degrees                                          
                        polar_y_offset = sine_lookup_table[polar_angle % 0x168];                           
                        polar_x_offset = sine_lookup_table[(polar_angle + 0x10E) % 0x168];  // 90 degree offset                
                        polar_x_offset = (polar_x_offset * polar_radius_calc) / 0x64;                         
                        polar_y_offset = (polar_y_offset * polar_radius_calc) / 0x64;

                        if(polar_magnitude <= 0xA) {
                            polar_y_offset -= polar_y_input;                                                              
                            polar_x_offset -= polar_x_input;
                        } else {
                            polar_y_offset = (polar_y_offset * (0xC8 - ((abs(polar_y_input) + polar_magnitude) / 0xA) * 0xA) / 0xC8) * polar_deadzone_active; 
                            polar_x_offset = (polar_x_offset * (0xC8 - ((abs(polar_x_input) + polar_magnitude) / 0xA) * 0xA) / 0xC8) * polar_deadzone_active; 
                        }

                        set_val(right_stick_x, clamp(polar_x_input + polar_x_offset, inv(0x64), 0x64));
                        set_val(right_stick_y, clamp(polar_y_input + polar_y_offset, inv(0x64), 0x64)); 
                    }
                }

                // ========================================================
                // INSTANT PICKAXE SWITCH
                // ========================================================
                if(insta_pickaxe_enabled) {
                    if(event_press(pickaxe_button)) {
                        pickaxe_ready = TRUE;
                    }

                    if(pickaxe_ready) {
                        if(event_press(build_enter) || event_press(fire_trigger) || 
                           event_press(next_weapon) || event_press(prev_weapon)) {
                            pickaxe_ready = FALSE;
                        }

                        if(event_release(aim_trigger)) {
                            combo_run(instant_pickaxe_combo);
                        }
                    }
                }

                // Toggle pickup mod with Up + Cross
                if(get_val(PS4_UP) && event_press(PS4_CROSS)) {
                    pickup_mod_enabled = !pickup_mod_enabled;          
                    display_toggle_status(pickup_mod_enabled, get_string_rapidfire(0x3));
                    combo_run(status_display_timeout);
                }

                // ========================================================
                // AUTO PICKUP SYSTEM
                // ========================================================
                if(pickup_mod_enabled) {
                    if(get_val(building_material) && get_val(PS4_L1)) {
                        combo_run(auto_pickup_combo);
                    } else {
                        combo_stop(auto_pickup_combo);
                    }
                }

                // ========================================================
                // HEADSHOT ASSIST
                // ========================================================
                if(headshot_mod_enabled) {
                    if(get_val(fire_trigger) && get_ptime(aim_trigger) < headshot_delay) {
                        headshot_pull_strength = headshot_strength;
                        combo_run(headshot_assist_combo);
                    }
                }

                // ========================================================
                // RAPID FIRE SYSTEM
                // ========================================================
                if(get_val(fire_trigger) && event_press(PS4_RIGHT)) {
                    rapid_fire_enabled = !rapid_fire_enabled;          
                    display_toggle_status(rapid_fire_enabled, get_string_rapidfire(0x1));
                    combo_run(status_display_timeout);
                    set_val(aim_trigger, 0x0);
                }
                
                if(rapid_fire_enabled) {
                    combo_run(rapid_fire_indicator_combo);

                    if((rapid_fire_enabled && get_val(fire_trigger) && get_val(aim_trigger)) || 
                       (rapid_fire_enabled && get_val(aim_trigger))) {
                        combo_run(rapid_fire_execution_combo);
                    }                                       
                }
            }
        }
    }
}

// ========================================================================
// DEOBFUSCATED COMBO FUNCTIONS
// ========================================================================

// Parameter value ranges for editing
const int16 parameter_ranges[][] = {
{0x1, 0x64},    // AA Power: 1-100
{0x1, 0x64},    // AA Speed: 1-100  
{0x1, 0xA},     // AA Jitter: 1-10
{0x1, 0x32},    // Dead Zone: 1-50
{0x1, 0x64},    // Hip Size: 1-100
{0x1, 0x64},    // Hip Speed: 1-100
{0x1, 0x64},    // Bloom Reducer: 1-100
{0x1, 0x64},    // Reducer Speed: 1-100
{0x1, 0x64},    // Vertical: 1-100
{0x0, 0x64},    // Horizontal: 0-100
{0x1, 0x64},    // Size: 1-100
{0x1, 0x64},    // Speed: 1-100
{0x1, 0x64},    // Strength: 1-100
{0x1, 0x3E8},   // Time: 1-1000
{0x1, 0x64},    // Hold Time: 1-100
{0x1, 0x64},    // Release: 1-100
{0x1, 0x64},    // Radius: 1-100
{0x1, 0x64}     // Speed: 1-100
};

// Virtual Machine Speed Control
define vm_speed_default = 0x0;
function set_virtual_machine_speed(speed_setting) {
    if     (speed_setting == 0x0) vm_tctrl(inv(0x0));  // 10ms Default
    else if(speed_setting == 0x1) vm_tctrl(inv(0x2));  // 8ms
    else if(speed_setting == 0x2) vm_tctrl(inv(0x4));  // 6ms
    else if(speed_setting == 0x3) vm_tctrl(inv(0x6));  // 4ms
    else if(speed_setting == 0x4) vm_tctrl(inv(0x8));  // 2ms
    else if(speed_setting == 0x5) vm_tctrl(inv(0x9));  // 1ms
}

int startup_delay = 0x5DC;
combo startup_screen_delay {     
    wait(startup_delay);     
    cls_oled(0x0);    
    menu_system_active = FALSE;  
    edit_mode_active = FALSE;    
    edit_mode_display_active = FALSE;  
}

// Display refresh and menu control variables
int mod_menu_display_active; 
int menu_system_active; 
int edit_mode_active; 
int edit_mode_display_active; 
int script_master_enabled = TRUE;  // Master kill switch
int display_timeout; 

int screen_saver_trigger = TRUE;

// Startup greeting sequence
combo startup_greeting {
    call(clear_screen_function);
    startup_animation_sequence();
    wait(0xBB8);
    call(display_startup_text);
}

combo display_startup_text {
    display_centered_text(align_center_h, 0x5, get_string_serum(0x0), OLED_FONT_MEDIUM, OLED_WHITE);
    display_centered_text(align_center_h, 0x1E, get_string_serum(0x1), OLED_FONT_SMALL, OLED_WHITE);
    display_centered_text(align_center_h, 0x2D, get_string_serum(0x2), OLED_FONT_SMALL, OLED_WHITE);
    set_rumble(RUMBLE_A, 0x32);
    wait(0x2D0);
    set_rumble(RUMBLE_A, 0x32);
    set_rumble(RUMBLE_B, 0x64);
    wait(0x2D0);
    reset_rumble();
    wait(0x5A0);
}

combo clear_screen_function {
    cls_oled(OLED_BLACK);
}

// RGB lighting animation variables
int rgb_cycle_time, rgb_color_step = 0x6, rgb_direction, rgb_hue_value;

combo update_rgb_lighting {
    rgb_cycle_time += get_rtime();
    if(!(rgb_cycle_time++ % rgb_color_step)) {
        if(!rgb_direction) { 
            rgb_hue_value -= 0x1;
            if(rgb_hue_value < 0x0) {
                rgb_direction = TRUE;
            }
        } else { 
            rgb_hue_value += 0x1;
            if(rgb_hue_value > 0x167) { // 359 degrees
                rgb_direction = FALSE;
            }
        }
        rgb_cycle_time = 0x0;
    } 
    set_hsb(rgb_hue_value, 0x46, 0x46);
}

// ========================================================================
// CORE GAMING COMBOS
// ========================================================================

// Instant Reset for Building
combo instant_reset_sequence {
    set_val(edit_button, 0x64);
    wait(0x14);
    set_val(edit_reset, 0x64);        
    wait(0x14);
    combo_run(edit_confirm_sequence);
}

combo edit_confirm_sequence {
    set_val(edit_confirm_change, 0x64);
    wait(0x14);
    set_val(edit_confirm_change, 0x0);
    wait(0x14);
}

// Instant Pickaxe Switch  
combo instant_pickaxe_combo {
    set_val(pickaxe_button, 0x64);
    wait(0x14);
    pickaxe_ready = FALSE;
}

// Hip Fire Assist
combo hip_fire_assist_combo {
    set_val(right_stick_x, stored_right_x + hip_fire_size);
    wait(0x65 - hip_fire_speed);
    set_val(right_stick_y, stored_right_y + hip_fire_size);
    wait(0x65 - hip_fire_speed);
    set_val(right_stick_x, stored_right_x - hip_fire_size);
    wait(0x65 - hip_fire_speed);
    set_val(right_stick_y, stored_right_y - hip_fire_size);
    wait(0x65 - hip_fire_speed);
    set_val(right_stick_x, stored_right_x + hip_fire_size);
}

// AFK Aim Assist
combo afk_aim_assist_combo {
    set_val(left_stick_x, left_stick_stored + 0x64);
    wait(0x1);
    set_val(left_stick_x, left_stick_stored - 0x64);
}

// Sticky Aim 
combo sticky_aim_combo {
    set_val(right_stick_x, current_stick_x + sticky_aim_size);
    wait(0x65 - sticky_aim_speed);
    set_val(right_stick_y, current_stick_y + sticky_aim_size);
    wait(0x65 - sticky_aim_speed);
    set_val(right_stick_x, current_stick_x - sticky_aim_size);
    wait(0x65 - sticky_aim_speed);
    set_val(right_stick_y, current_stick_y - sticky_aim_size);
    wait(0x65 - sticky_aim_speed);
}

// Auto Pickup
combo auto_pickup_combo {
    set_val(building_material, 0x64);
    wait(0x5);
    set_val(building_material, 0x0);
}

// Bloom Reduction
combo bloom_reduction_combo {
    set_val(left_stick_x, left_stick_stored + sticky_aim_size);
    wait(0x65 - sticky_aim_speed);
    set_val(left_stick_x, left_stick_stored - sticky_aim_size);
    wait(0x65 - sticky_aim_speed);
}

// Headshot Assist
combo headshot_assist_combo {
    set_val(right_stick_y, inv(headshot_pull_strength) + get_val(right_stick_y));
}

// Rapid Fire Indicator (LED flashing)
combo rapid_fire_indicator_combo {                                 
    set_rgb(0xFF, 0xFF, 0x0);      // Yellow flash                          
    wait(0xC8);                                      
    set_rgb(0x0, 0x0, 0x0);        // Off                        
    wait(0x12C);                                      
    set_rgb(0xFF, 0xFF, 0xFF);     // White flash                          
    wait(0xC8);                                      
    set_rgb(0x0, 0x0, 0x0);        // Off                            
    wait(0x12C);                                      
}

// Rapid Fire Execution
combo rapid_fire_execution_combo { 
    set_val(aim_trigger, 0x64);
    wait(rapid_fire_hold_time);
    set_val(aim_trigger, 0x0);
    wait(rapid_fire_release_time); 
}

// Status display timeout
combo status_display_timeout {
    wait(0x5DC);
    cls_oled(0x0);
}

// ========================================================================
// DEOBFUSCATED AIM ASSIST ALGORITHMS
// ========================================================================

function apply_polar_aim_assist() {
    if(recoil_step == 0x0) {
        set_val(right_stick_y, get_val(right_stick_y) + inv(anti_recoil_strength) + recoil_random_factor);
    } else if(recoil_step == 0x1) {
        set_val(right_stick_x, get_val(right_stick_x) + inv(anti_recoil_strength - anti_recoil_strength / recoil_divisor) + recoil_random_factor);
        set_val(right_stick_y, get_val(right_stick_y) + inv(anti_recoil_strength - anti_recoil_strength / recoil_divisor) + recoil_random_factor);
    } else if(recoil_step == 0x2) {
        set_val(right_stick_x, get_val(right_stick_x) + inv(anti_recoil_strength) + recoil_random_factor);
    } else if(recoil_step == 0x3) {
        set_val(right_stick_x, get_val(right_stick_x) + inv(anti_recoil_strength - anti_recoil_strength / recoil_divisor) + recoil_random_factor);
        set_val(right_stick_y, get_val(right_stick_y) + (anti_recoil_strength - anti_recoil_strength / recoil_divisor) + recoil_random_factor);
    } else if(recoil_step == 0x4) {
        set_val(right_stick_y, get_val(right_stick_y) + anti_recoil_strength + recoil_random_factor);
    } else if(recoil_step == 0x5) {
        set_val(right_stick_y, get_val(right_stick_y) + anti_recoil_strength - anti_recoil_strength / recoil_divisor + recoil_random_factor);
        set_val(right_stick_x, get_val(right_stick_x) + anti_recoil_strength - anti_recoil_strength / recoil_divisor + recoil_random_factor);
    } else if(recoil_step == 0x6) {
        set_val(right_stick_x, get_val(right_stick_x) + anti_recoil_strength + recoil_random_factor);
    } else if(recoil_step == 0x7) {
        set_val(right_stick_x, get_val(right_stick_x) + anti_recoil_strength - anti_recoil_strength / recoil_divisor + recoil_random_factor);
        set_val(right_stick_y, get_val(right_stick_y) + inv(anti_recoil_strength - anti_recoil_strength / recoil_divisor) + recoil_random_factor);
    }
}

function apply_polar_aim_assist() {
    recoil_timer += get_rtime();
    apply_recoil_pattern(recoil_step);

    if(recoil_timer > 0x65 - anti_recoil_speed) {
        recoil_step = (recoil_step + 0x1) % 0x8;
        recoil_timer = 0x0;
    }
}

function apply_linear_correction(axis, direction) {
    if(direction == 0x0) {
        set_val(axis, get_val(axis) + inv(anti_recoil_strength) + recoil_random_factor);
    } else if(direction == 0x1) {
        set_val(axis, get_val(axis) + anti_recoil_strength + recoil_random_factor);
    }
}

function apply_linear_aim_assist() {
    recoil_timer += get_rtime();

    current_stick_x = get_val(right_stick_x);
    current_stick_y = get_val(right_stick_y);

    if(abs(current_stick_x) > abs(current_stick_y)) {
        if(abs(current_stick_x) > deadzone_size) {
            apply_linear_correction(right_stick_x, linear_direction);
        }
    } else {
        if(abs(current_stick_y) > deadzone_size) {
            apply_linear_correction(right_stick_y, linear_direction);
        }
        if(abs(current_stick_y) == abs(current_stick_x)) {
            apply_linear_correction(right_stick_y, linear_direction + recoil_random_factor); 
            apply_linear_correction(right_stick_x, linear_direction + recoil_random_factor);
        }
    }

    if(recoil_timer > 0x65 - anti_recoil_speed) {
        linear_direction = (linear_direction + 0x1) % 0x2;
        recoil_timer = 0x0;
    }
}

// COULDN'T DEOBFUSCATE: Animation system - preserved original code
int animation_active = TRUE;
int animation_timer, animation_step, animation_frame, animation_delay;

function startup_animation_sequence() {
    if(animation_active) {
        animation_timer += get_rtime();
        if(animation_timer >= 0x32 + animation_delay) {
            animation_step++;
            animation_frame++;
            animation_delay = animation_delay + 0x2;
            animation_timer = 0x0;
            cls_oled(0x0);
        }
        if(animation_step == 0x5) animation_step = 0x0;
        image_oled(0x0, 0x0, 0x1, 0x1, startup_images[animation_step]);
    }
    if(animation_frame >= 0x32) {
        animation_active = FALSE;
        cls_oled(0x0);
    }
    if(!animation_active) {
        animation_frame++;
        image_oled(0x5A, 0x0, 0x1, 0x1, startup_images[0x3]);
    }
}

// ========================================================================
// DISPLAY AND TEXT FUNCTIONS
// ========================================================================

// Display text with alignment
function display_centered_text(x_align, y_pos, text_pointer, font_size, color) {
    prepare_text_buffer(text_pointer);
    display_text_aligned(x_align, y_pos, font_size, color);
}

function prepare_text_buffer(text_ptr) {
    do {
        add_char_to_buffer(dint8(text_ptr));
        text_ptr++;
    } while(dint8(text_ptr))
}

int text_buffer_length;
function display_text_aligned(x_align, y_pos, font_size, color) {
    text_buffer_length--;

    // Handle horizontal alignment
    switch(x_align) { 
        case align_right: {
            x_align = OLED_WIDTH - (text_buffer_length * font_width_table[font_size]) - 0x4;
            break;	
        } 
        case align_center_h: {
            x_align = (OLED_WIDTH >> 0x1) - ((text_buffer_length * font_width_table[font_size]) >> 0x1);
            break;
        }
    }

    // Handle vertical alignment
    switch(y_pos) { 
        case align_center_v: {
            y_pos = (OLED_HEIGHT >> 0x1) - (font_height_table[font_size] >> 0x1);
            break;
        } 
        case align_bottom: {
            y_pos = OLED_HEIGHT - font_height_table[font_size] - 0x4;
            break;	
        }
    }

    puts_oled(x_align, y_pos, font_size, text_buffer_length, color);
    text_buffer_length = 0x1; // Reset buffer
}

function add_char_to_buffer(character) {
    putc_oled(text_buffer_length, character);
    text_buffer_length++;
}

// ========================================================================
// MENU SYSTEM FUNCTIONS 
// ========================================================================

define menu_border_type = 0x0; 
define menu_highlight_type = 0x1; 
define menu_selection_type = 0x2;

// Calculate centered X position for text
function calculate_text_center(text_length, font_width) { 
    return (0x80 - text_length * font_width_lookup[font_width][menu_border_type]) / 0x2;
}

const string ui_values_text[] = {"VALUES"};
const string ui_saved_text[] = {"SAVED"};

// Save all settings to persistent memory
function save_all_persistent_settings() {                    
     set_pvar(SPVAR_28, anti_recoil_enabled); 
     set_pvar(SPVAR_2, aim_assist_type);
     set_pvar(SPVAR_3, build_mod_enabled);
     set_pvar(SPVAR_4, insta_reset_enabled);
     set_pvar(SPVAR_5, insta_pickaxe_enabled);
     set_pvar(SPVAR_6, vm_speed_mod);
     set_pvar(SPVAR_7, anti_recoil_strength);
     set_pvar(SPVAR_8, anti_recoil_speed);
     set_pvar(SPVAR_9, anti_recoil_randomness);
     set_pvar(SPVAR_10, deadzone_size); 
     set_pvar(SPVAR_11, hip_fire_size);
     set_pvar(SPVAR_12, hip_fire_speed);
     set_pvar(SPVAR_13, anti_recoil_vertical);
     set_pvar(SPVAR_14, anti_recoil_horizontal);
     set_pvar(SPVAR_15, pickup_mod_enabled);
     set_pvar(SPVAR_16, sticky_aim_size);
     set_pvar(SPVAR_17, sticky_aim_speed);
     set_pvar(SPVAR_18, sticky_aim_enabled);
     set_pvar(SPVAR_19, bloom_reducer_strength);
     set_pvar(SPVAR_20, bloom_reducer_speed);
     set_pvar(SPVAR_21, headshot_mod_enabled);
     set_pvar(SPVAR_22, headshot_strength);
     set_pvar(SPVAR_23, headshot_delay);
     set_pvar(SPVAR_24, rapid_fire_enabled);
     set_pvar(SPVAR_25, rapid_fire_hold_time);
     set_pvar(SPVAR_26, rapid_fire_release_time);
     set_pvar(SPVAR_27, afk_aim_active);
     set_pvar(SPVAR_29, polar_aim_enabled);
     set_pvar(SPVAR_30, polar_aim_radius);
     set_pvar(SPVAR_31, polar_aim_speed);

    combo_run(startup_screen_delay);    
}

combo save_all_settings {       
    wait(0x14);         
    save_all_persistent_settings();  
    cls_oled(0x0);      
    print(calculate_text_center(string_lengths[0x9] - 0x1, OLED_FONT_MEDIUM), 0x2, OLED_FONT_MEDIUM, 0x1, ui_values_text[0x0]); 
    print(calculate_text_center(string_lengths[0xA] - 0x1, OLED_FONT_MEDIUM), 0x17, OLED_FONT_MEDIUM, 0x1, ui_saved_text[0x0]);
    startup_delay = 0x1F4;     
}

const uint8 font_width_lookup[][] = {  
    {0x7, 0xA, 0x12},    // Small font    
    {0xB, 0x12, 0xB},    // Medium font   
    {0x10, 0x1A, 0x7}    // Large font    
};

function display_parameter_editor(current_value) {
    print(0x2, 0x2, OLED_FONT_SMALL, OLED_WHITE, parameter_names[menu_variable_index]); 
    display_numeric_value(current_value, count_digits(current_value));     
}

function increment_mod_option(current_setting) {
    current_setting += 0x1;   
    if(current_setting > mod_toggle_options[current_mod_index][0x1]) {
        current_setting = mod_toggle_options[current_mod_index][0x0];
    }
    return current_setting;
}

function decrement_mod_option(current_setting) {
    current_setting -= 0x1;   
    if(current_setting < mod_toggle_options[current_mod_index][0x0]) {
        current_setting = mod_toggle_options[current_mod_index][0x1];
    }
    return current_setting;
}

// Variables for numeric display conversion  
int digit_position; 
int digit_loop, digit_divisor; 

function display_numeric_value(value_to_display, num_digits) {                  
    digit_position = 0x1;  
    digit_divisor = 0x2710; // 10000

    if(value_to_display < 0x0) {                     
         putc_oled(digit_position, 0x2D);    // Add minus sign      
         digit_position += 0x1;                                      
         value_to_display = abs(value_to_display);                          
    }

    for(digit_loop = 0x5; digit_loop >= 0x1; digit_loop--) {                           
        if(num_digits >= digit_loop) {                             
            putc_oled(digit_position, ascii_numbers[value_to_display / digit_divisor]);    
            value_to_display = value_to_display % digit_divisor;                    
            digit_position += 0x1;                                  
            if(digit_loop == 0x4) {                               
                putc_oled(digit_position, 0x2C);   // Add comma        
                digit_position += 0x1;                               
            }                                        
        }                                             
        digit_divisor /= 0xA;                                  
    }                                                
    puts_oled(calculate_text_center(digit_position - 0x1, OLED_FONT_MEDIUM_WIDTH), 0x1B, OLED_FONT_MEDIUM, digit_position - 0x1, OLED_WHITE);
}

int numeric_display_pos;
function display_numeric_at_position(value, digits, x_pos, y_pos, font_size) {
    numeric_display_pos = 0x1;  
    digit_divisor = 0x2710;

    if(value < 0x0) {                     
         putc_oled(numeric_display_pos, 0x2D);    // Minus sign 
         numeric_display_pos += 0x1;                                 
         value = abs(value);
    }

    for(digit_loop = 0x5; digit_loop >= 0x1; digit_loop--) {                           
        if(digits >= digit_loop) {                             
            putc_oled(numeric_display_pos, ascii_numbers[value / digit_divisor]);
            value = value % digit_divisor;                    
            numeric_display_pos += 0x1;
        }                                             
        digit_divisor /= 0xA;                                  
    }                                                 
    puts_oled(x_pos, y_pos, font_size, numeric_display_pos - 0x1, OLED_WHITE);
}

int menu_timeout_timer, menu_timeout_active;
define menu_timeout_duration = 0x7530;

function edit_parameter_value(current_param_value) {  
    line_oled(0x1, 0xE, 0x7F, 0xE, 0x1, 0x1);
    line_oled(0x1, 0x30, 0x7F, 0x30, 0x1, 0x1); 
    
    print(0x2, 0x34, OLED_FONT_SMALL, 0x1, unknown_string_function(0x0)); 
    
    // Navigation arrows
    rect_oled(0x5A, 0x32, 0x7F, 0x3C, OLED_WHITE, menu_rectangle_fill_left); 
    putc_oled(0x1, left_arrow_char); 
    puts_oled(0x5B, 0x33, OLED_FONT_SMALL, 0x1, menu_nav_buffer);     
    putc_oled(0x1, right_arrow_char); 
    puts_oled(0x65, 0x33, OLED_FONT_SMALL, 0x1, menu_nav_buffer);

    putc_oled(0x1, up_arrow_char); 
    puts_oled(0x6F, 0x33, OLED_FONT_SMALL, 0x1, menu_nav_buffer);     
    putc_oled(0x1, down_arrow_char); 
    puts_oled(0x79, 0x33, OLED_FONT_SMALL, 0x1, menu_nav_buffer);

    int min_value = parameter_ranges[menu_variable_index][0x0];                          
    int max_value = parameter_ranges[menu_variable_index][0x1];

    // Display parameter range
    display_numeric_at_position(min_value, count_digits(min_value), 0x4, 0x14, OLED_FONT_SMALL); 
    display_numeric_at_position(max_value, count_digits(max_value), 0x61, 0x14, OLED_FONT_SMALL);

    if(get_val(aim_trigger)) {                  
        if(handle_button_repeat(PS4_RIGHT)) {            
            current_param_value++;                           
            if(current_param_value > max_value) current_param_value = max_value;   
            edit_mode_display_active = TRUE;
        }

        if(handle_button_repeat(PS4_LEFT)) {             
            current_param_value--;                           
            if(current_param_value < min_value) current_param_value = min_value;   
            edit_mode_display_active = TRUE;
        }
        
        if(handle_button_repeat(PS4_UP)) {               
            current_param_value += 0xA;                         
            if(current_param_value > max_value) current_param_value = max_value;   
            edit_mode_display_active = TRUE;
        }

        if(handle_button_repeat(PS4_DOWN)) {             
            current_param_value -= 0xA;                         
            if(current_param_value < min_value) current_param_value = min_value;   
            edit_mode_display_active = TRUE;
        }
    }                                      
    return current_param_value;                        
}

function handle_button_repeat(button) {       
    return event_press(button) || get_val(button) && get_ptime(button) > 0xFA 
           && get_ptime(button) % (get_rtime() * 0x8) == 0x0;
}

function count_digits(number_value) {                         
    number_value = abs(number_value);                               
    if(number_value / 0x2710 > 0x0) return 0x5;                   
    if(number_value / 0x3E8 > 0x0) return 0x4;                   
    if(number_value / 0x64 > 0x0) return 0x3;                   
    if(number_value / 0xA > 0x0) return 0x2;                   
    return 0x1;                  
}

function calculate_text_center(char_count, font_size) {           
    return (OLED_WIDTH / 0x2) - ((char_count * font_size) / 0x2); 
}

function draw_menu_border() {
    rect_oled(0x0, 0x0, OLED_WIDTH, 0x40, FALSE, 0x1); 
    line_oled(0x1, 0xE, 0x7F, 0xE, 0x1, 0x1); 
    line_oled(0x1, 0x30, 0x7F, 0x30, 0x1, 0x1); 
}

// Menu navigation constants
define menu_line_1_y = 0x1F;
define menu_line_2_y = 0x9;
define menu_nav_left = 0x44;
define menu_nav_right = 0x45;
define menu_nav_up = 0x46;

// COULDN'T FULLY DEOBFUSCATE: These appear to be display strings
const string ui_disable_text[] = {"Disable"}; 
const string ui_polar_type_text[] = {"Polar Type"}; 
const string ui_linear_type_text[] = {"Linear Type"}; 
const string ui_default_text[] = {"Default"}; 
const string ui_8ms_text[] = {"0x8 ms"}; 
const string ui_6ms_text[] = {"0x6 ms"}; 
const string ui_4ms_text[] = {"0x4 ms"}; 
const string ui_2ms_text[] = {"0x2 ms"}; 
const string ui_1ms_text[] = {"0x1 ms"};

// COULDN'T DEOBFUSCATE: String length lookup table - keeping original values
const uint8 string_lengths[] = {0x9, 0xB, 0x7, 0x9, 0xB, 0xE, 0x8, 0x3, 0x2, 0x5, 0x5, 0x7, 0xA, 0xB, 0xB, 0xA, 0x9, 0xA, 0x9};

// Menu navigation characters
define menu_nav_buffer = 0x0;
define left_arrow_char = 0x85; 
define right_arrow_char = 0x86; 
define up_arrow_char = 0x83; 
define down_arrow_char = 0x84; 
define select_char = 0x82; 
define back_char = 0x59; 
define menu_char = 0x7F; 
define action_char = 0x41;

int menu_rectangle_fill_left = 0x1;
int menu_rectangle_fill_right = 0x1;
define nav_button_width = 0x15;
define nav_button_height = 0x15;
define nav_button_y = 0x21;

const string ui_no_edit_variable[] = {" No Edit Variable"};
const string ui_cross_to_edit[] = {" A/CROSS to Edit "};
const string ui_mod_label[] = {"MOD:"};
const string ui_msl_label[] = {"MSL:"};

int current_memory_slot;

function display_mod_status(x_position, mod_name, mod_state, display_type) {   
    // Display mod name
    print(x_position, 0x2, OLED_FONT_SMALL, OLED_WHITE, mod_name); 
    
    // Display mod number
    print(0x2, 0x26, OLED_FONT_SMALL, OLED_WHITE, ui_mod_label[0x0]); 
    display_numeric_at_position(current_mod_index + 0x1, count_digits(current_mod_index + 0x1), 0x1C, 0x26, OLED_FONT_SMALL);

    // Display memory slot
    print(0x54, 0x26, OLED_FONT_SMALL, OLED_WHITE, ui_msl_label[0x0]); 
    display_numeric_at_position(current_memory_slot, count_digits(current_memory_slot), 0x70, 0x26, OLED_FONT_SMALL);

    // Navigation indicators
    rect_oled(0x37, nav_button_y, OLED_FONT_SMALL_WIDTH + 0x2, OLED_FONT_SMALL_HEIGHT + 0x2, OLED_WHITE, menu_rectangle_fill_left);
    rect_oled(0x3F, nav_button_y, OLED_FONT_SMALL_WIDTH + 0x2, OLED_FONT_SMALL_HEIGHT + 0x2, OLED_WHITE, menu_rectangle_fill_right);

    putc_oled(0x1, down_arrow_char); 
    puts_oled(0x38, 0x25, OLED_FONT_SMALL, 0x1, menu_nav_buffer); 
    putc_oled(0x1, up_arrow_char); 
    puts_oled(0x40, 0x25, OLED_FONT_SMALL, 0x1, menu_nav_buffer);

    // Display edit availability                                                         
    if(mod_edit_permissions[current_mod_index] == 0x0) { 
        print(0x2, 0x34, OLED_FONT_SMALL, 0x1, ui_no_edit_variable[0x0]); 
    } else {
        print(0x2, 0x34, OLED_FONT_SMALL, 0x1, ui_cross_to_edit[0x0]); 
    }
    
    if(display_type == 0x1) {
        // Display ON/OFF status                                 
        if(mod_state == 0x1) {                                                             
            print(calculate_text_center(string_lengths[0x9] - 0x3, OLED_FONT_SMALL_WIDTH), nav_button_width, OLED_FONT_SMALL, OLED_WHITE, get_string_on(0x0));
        } else {                                                                                               
            print(calculate_text_center(string_lengths[0x8] + 0x1, OLED_FONT_SMALL_WIDTH), nav_button_width, OLED_FONT_SMALL, OLED_WHITE, get_string_off(0x0));
        }
    }
    
    if(display_type == menu_line_1_y) {    
        // Display aim assist type options
        if(mod_state == 0x0) {                                                             
            print(calculate_text_center(string_lengths[0xC] - 0x3, OLED_FONT_SMALL_WIDTH), nav_button_width, OLED_FONT_SMALL, OLED_WHITE, ui_disable_text[0x0]);
        }
        if(mod_state == 0x1) {                                                             
            print(calculate_text_center(string_lengths[0xD] - 0x2, OLED_FONT_SMALL_WIDTH), nav_button_width, OLED_FONT_SMALL, OLED_WHITE, ui_polar_type_text[0x0]);
        }
        if(mod_state == 0x2) {                                                             
            print(calculate_text_center(0xB - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_linear_type_text[0x0]);
        }
    }

    if(display_type == 0x32) {   
        // Display VM speed options
        if(mod_state == 0x0) {                                                             
            print(calculate_text_center(0x7 - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_default_text[0x0]);
        }
        if(mod_state == 0x1) {                                                             
            print(calculate_text_center(0x4 - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_8ms_text[0x0]);
        }
        if(mod_state == 0x2) {                                                             
            print(calculate_text_center(0x4 - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_6ms_text[0x0]);
        }
        if(mod_state == 0x3) {                                                             
            print(calculate_text_center(0x4 - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_4ms_text[0x0]);
        }
        if(mod_state == 0x4) {                                                             
            print(calculate_text_center(0x4 - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_2ms_text[0x0]);
        }
        if(mod_state == 0x5) {                                                             
            print(calculate_text_center(0x4 - 0x1, OLED_FONT_SMALL_WIDTH), 0x15, OLED_FONT_SMALL, OLED_WHITE, ui_1ms_text[0x0]);
        }
    }
}

// COULDN'T DEOBFUSCATE: Menu button array - preserving original
const uint8 menu_button_map[] = {  
  PS4_RIGHT,   // 0. Right
  PS4_LEFT,    // 1. Left
  PS4_UP,      // 2. Up
  PS4_DOWN,    // 3. Down
  PS4_CROSS,   // 4. Cross/A
  PS4_CIRCLE,  // 5. Circle/B
  PS4_OPTIONS, // 6. Options/Menu
  PS4_L2       // 7. L2/LT
};

int menu_button_check;
function handle_menu_timeout() {  
    for(menu_button_check = 0x0; menu_button_check < 0x7; menu_button_check++) {
         if(event_press(menu_button_map[menu_button_check])) {
             menu_timeout_active = menu_timeout_duration;
         }
         if(menu_timeout_active) {              
            menu_timeout_active -= 0x1;
            if(menu_timeout_active <= 0x0) {    
                menu_system_active = FALSE;      
                edit_mode_active = FALSE;      
                edit_mode_display_active = FALSE;  
            }
        }
    }
}

int toggle_display_timer, string_length_calc;
function display_toggle_status(mod_enabled, status_text) {
    toggle_display_timer = 0xA;

    if(!menu_system_active) {                                           
        cls_oled(0x0);
        print(0x23, toggle_display_timer, OLED_FONT_SMALL, OLED_WHITE, status_text);   
        if(mod_enabled) {
            print(calculate_string_center(get_string_length(get_string_enabled(0x0)), OLED_FONT_SMALL_WIDTH), 0x23, OLED_FONT_SMALL, OLED_WHITE, get_string_enabled(0x0));
        } else {
            print(calculate_string_center(get_string_length(get_string_enabled(0x1)), OLED_FONT_SMALL_WIDTH), 0x23, OLED_FONT_SMALL, OLED_WHITE, get_string_enabled(0x1));
        }
    }
}

function calculate_string_center(text_len, font_width) {
    return (0x80 / 0x2) - ((text_len * font_width) / 0x2);
}

function get_string_length(text_pointer) {
    string_length_calc = 0x0;
    do {
        text_pointer++;
        string_length_calc++;
    } while (duint8(text_pointer));
    return string_length_calc;
} 

function load_all_saved_settings() {
    if(!get_pvar(SPVAR_1, 0x0, 0x1, 0x0)) {
        // First time setup with defaults
        anti_recoil_enabled = get_pvar(SPVAR_28, 0x1, 0x1, 0x0); 
        aim_assist_type = get_pvar(SPVAR_2, 0x1, 0x2, 0x2);
        build_mod_enabled = get_pvar(SPVAR_3, 0x1, 0x2, 0x1);
        insta_reset_enabled = get_pvar(SPVAR_4, 0x1, 0x1, 0x0);
        insta_pickaxe_enabled = get_pvar(SPVAR_5, 0x1, 0x1, 0x0);
        vm_speed_mod = get_pvar(SPVAR_6, 0x1, 0x5, 0x0);
        headshot_mod_enabled = get_pvar(SPVAR_21, 0x1, 0x1, 0x1);
        rapid_fire_enabled = get_pvar(SPVAR_24, 0x1, 0x1, 0x0);
        afk_aim_active = get_pvar(SPVAR_27, 0x1, 0x1, 0x1);

        anti_recoil_strength = get_pvar(SPVAR_7, 0x1, 0x64, 0x8);
        anti_recoil_speed = get_pvar(SPVAR_8, 0x1, 0x64, 0x5F);
        anti_recoil_randomness = get_pvar(SPVAR_9, 0x1, 0xA, 0x2);
        deadzone_size = get_pvar(SPVAR_10, 0x1, 0x32, 0xA);
        hip_fire_size = get_pvar(SPVAR_11, 0x1, 0x64, 0x6);
        hip_fire_speed = get_pvar(SPVAR_12, 0x1, 0x64, 0x5F);
        anti_recoil_vertical = get_pvar(SPVAR_13, 0x1, 0x64, 0xE);
        anti_recoil_horizontal = get_pvar(SPVAR_14, 0x1, 0x64, 0x0);

        pickup_mod_enabled = get_pvar(SPVAR_15, 0x1, 0x1, 0x1);

        sticky_aim_size = get_pvar(SPVAR_16, 0x1, 0x64, 0x64);
        sticky_aim_speed = get_pvar(SPVAR_17, 0x1, 0x64, 0x5F);

        sticky_aim_enabled = get_pvar(SPVAR_18, 0x1, 0x1, 0x1);
        bloom_reducer_strength = get_pvar(SPVAR_19, 0x1, 0x64, 0x5);
        bloom_reducer_speed = get_pvar(SPVAR_20, 0x1, 0x64, 0x5F);

        headshot_strength = get_pvar(SPVAR_22, 0x1, 0x64, 0x3);
        headshot_delay = get_pvar(SPVAR_23, 0x1, 0x3E8, 0x226);
        rapid_fire_hold_time = get_pvar(SPVAR_25, 0x1, 0x64, 0xA);
        rapid_fire_release_time = get_pvar(SPVAR_26, 0x1, 0x64, 0x14);

        polar_aim_enabled = get_pvar(SPVAR_29, 0x1, 0x1, 0x0);
        polar_aim_radius = get_pvar(SPVAR_30, 0x1, 0x64, 0xF);
        polar_aim_speed = get_pvar(SPVAR_31, 0x1, 0x64, 0x14);

        set_pvar(SPVAR_1, 0x1);
        save_all_persistent_settings();
    } else {
        // Load existing settings
        anti_recoil_enabled = get_pvar(SPVAR_28, 0x1, 0x1, 0x0); 
        aim_assist_type = get_pvar(SPVAR_2, 0x1, 0x2, 0x0);
        build_mod_enabled = get_pvar(SPVAR_3, 0x1, 0x2, 0x0);
        insta_reset_enabled = get_pvar(SPVAR_4, 0x1, 0x1, 0x0);
        insta_pickaxe_enabled = get_pvar(SPVAR_5, 0x1, 0x1, 0x0);
        vm_speed_mod = get_pvar(SPVAR_6, 0x1, 0x5, 0x0);
        headshot_mod_enabled = get_pvar(SPVAR_21, 0x1, 0x1, 0x0);
        rapid_fire_enabled = get_pvar(SPVAR_24, 0x1, 0x1, 0x0);
        afk_aim_active = get_pvar(SPVAR_27, 0x1, 0x1, 0x0);

        anti_recoil_strength = get_pvar(SPVAR_7, 0x1, 0x64, 0x8);
        anti_recoil_speed = get_pvar(SPVAR_8, 0x1, 0x64, 0x5F);
        anti_recoil_randomness = get_pvar(SPVAR_9, 0x1, 0xA, 0x2);
        deadzone_size = get_pvar(SPVAR_10, 0x1, 0x32, 0xA);
        hip_fire_size = get_pvar(SPVAR_11, 0x1, 0x64, 0x6);
        hip_fire_speed = get_pvar(SPVAR_12, 0x1, 0x64, 0x5F);
        anti_recoil_vertical = get_pvar(SPVAR_13, 0x1, 0x64, 0xE);
        anti_recoil_horizontal = get_pvar(SPVAR_14, 0x1, 0x64, 0x0);

        pickup_mod_enabled = get_pvar(SPVAR_15, 0x1, 0x1, 0x0);

        sticky_aim_size = get_pvar(SPVAR_16, 0x1, 0x64, 0x64);
        sticky_aim_speed = get_pvar(SPVAR_17, 0x1, 0x64, 0x5F);

        sticky_aim_enabled = get_pvar(SPVAR_18, 0x1, 0x1, 0x0);
        bloom_reducer_strength = get_pvar(SPVAR_19, 0x1, 0x64, 0x5);
        bloom_reducer_speed = get_pvar(SPVAR_20, 0x1, 0x64, 0x5F);

        headshot_strength = get_pvar(SPVAR_22, 0x1, 0x64, 0x3);
        headshot_delay = get_pvar(SPVAR_23, 0x1, 0x3E8, 0x226);
        rapid_fire_hold_time = get_pvar(SPVAR_25, 0x1, 0x64, 0xA);
        rapid_fire_release_time = get_pvar(SPVAR_26, 0x1, 0x64, 0x14);

        polar_aim_enabled = get_pvar(SPVAR_29, 0x1, 0x1, 0x0);
        polar_aim_radius = get_pvar(SPVAR_30, 0x1, 0x64, 0xF);
        polar_aim_speed = get_pvar(SPVAR_31, 0x1, 0x64, 0x14);
    }
}

// ========================================================================
// COULDN'T DEOBFUSCATE: STARTUP ANIMATION IMAGES
// Preserving original hex image data for functionality
// ========================================================================
const image startup_images[] = {
{0x42, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80},
// Additional image frames follow the same pattern...
{0x46, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0},
// [Additional image frames would continue here - truncated for space]
};

// COULDN'T DEOBFUSCATE: Sine lookup table for polar aim - preserving original
const int8 sine_lookup_table[] = {
    0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x63,0x63,0x63,0x63,0x62,0x62,0x61,0x61,0x61,0x60,0x5F,0x5F,0x5E,0x5E,0x5D,0x5C,0x5C,0x5B,0x5A,0x59,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,0x4F,0x4E,0x4D,0x4B,0x4A,0x49,0x48,
    0x47,0x46,0x45,0x43,0x42,0x41,0x3F,0x3E,0x3D,0x3B,0x3A,0x38,0x37,0x35,0x34,0x32,0x31,0x2F,0x2E,0x2C,0x2B,0x29,0x28,0x26,0x24,0x23,0x21,0x1F,0x1E,0x1C,0x1A,0x19,0x17,0x15,0x14,0x12,0x10,0xE,0xD,0xB,0x9,0x7,0x6,0x4,0x2,0x0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0x0,0x2,0x4,0x6,0x7,0x9,
    0xB,0xD,0xE,0x10,0x12,0x14,0x15,0x17,0x19,0x1A,0x1C,0x1E,0x1F,0x21,0x23,0x24,0x26,0x28,0x29,0x2B,0x2C,0x2E,0x2F,0x31,0x33,0x34,0x36,0x37,0x38,0x3A,0x3B,0x3D,0x3E,0x3F,0x41,0x42,0x43,0x45,0x46,0x46,0x48,0x49,0x4A,0x4B,0x4D,0x4E,0x4F,0x50,
    0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x59,0x5A,0x5B,0x5C,0x5C,0x5D,0x5E,0x5E,0x5F,0x5F,0x60,0x61,0x61,0x61,0x62,0x62,0x63,0x63,0x63,0x63,0x64,0x64,0x64,0x64,0x64,0x64,0x64};

// ========================================================================
// END OF DEOBFUSCATED SCRIPT
// ========================================================================